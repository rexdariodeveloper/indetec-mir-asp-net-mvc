@model RequisicionesAlmacen.Areas.MIR.Catalogos.Models.ViewModel.ControlMaestroUnidadMedidaViewModel
@{
    ViewData["Title"] = "Catálogo de Unidades de Medida";
}

@Html.Partial("_HeaderLayout", new ViewDataDictionary { { "NombreFicha", "Catálogo de Unidades de Medida" }, { "Accion", "" }, { "Icono", "fa fa-inbox" } })

<!-- MODAL LOADER -->
@Html.Partial("~/Views/Shared/_LoadPanel.cshtml")

<!-- MODAL NUEVO O EDITAR -->
<div class="modal fade effect-scale" id="modalUnidadMedida" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-hidden="true" isEdit>
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bd-0">
            <div class="modal-header pd-y-20 pd-x-25">
                <h6 class="tx-14 mg-b-0 tx-uppercase tx-inverse tx-bold modal-title">Nuevo registro</h6>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body pd-25">
                <!-- Crear Begin form -->
                @using (Html.BeginForm())
                {
                    <!-- Grupo de validación -->
                    using (Html.DevExtreme().ValidationGroup())
                    {
                        <!-- Seguridad -->
                        @Html.AntiForgeryToken();
                        <!-- Crear el Formulario -->
                        @(Html
                            .DevExtreme()
                            .Form()
                            .ID("dxFormUnidadMedida")
                            .RequiredMark("(*)")
                            .LabelLocation(FormLabelLocation.Top)
                            .Items(item =>
                            {
                                item
                                .AddGroup()
                                .ColCount(12)
                                .Items(itemGroup =>
                                {
                                    itemGroup
                                    .AddSimple()
                                    .ColSpan(12)
                                    .Label(label => label.Text("Nombre"))
                                    .DataField("Nombre")
                                    .IsRequired(true)
                                    .ValidationRules(validationRules => {
                                        validationRules.AddStringLength().Min(4).Message("El mínimo 4 caracteres");
                                        validationRules.AddStringLength().Max(100).Message("El máximo 100 caracteres");
                                    });

                                    itemGroup
                                    .AddSimple()
                                    .ColSpan(12)
                                    .Label(label => label.Text("Definición fórmula"))
                                    .DataField("Formula")
                                    .IsRequired(true)
                                    .ValidationRules(validationRules => {
                                        validationRules.AddPattern().Pattern("^[a-zA-Z0-9\\s._()+-/*]+$").Message("Solo letras, paréntesis y operadores normales");
                                        validationRules.AddRequired().Message("La formula requerido");
                                        validationRules.AddStringLength().Max(500).Message("El máximo 500 caracteres");
                                    })
                                    .Editor(editor =>
                                        editor.TextBox()
                                        .OnValueChanged("onValueChangedFormula")
                                    );

                                    itemGroup
                                    .AddSimple()
                                    .ColSpan(12)
                                    .Label(label => label.Text("Dimensión"))
                                    .DataField("Dimension")
                                    .IsRequired(true)
                                    .Editor(editor =>
                                        editor.DropDownBox()
                                        .ValueExpr("DimensionId")
                                        .DisplayExpr("Descripcion")
                                        .DataSource(d => d.Array().Data(Model.ListControlMaestroDimension).Key("DimensionId"))
                                        .Placeholder("Selecciona...")
                                        .ShowClearButton(true)
                                        .OnValueChanged("onValueChangedDropDownBox")
                                        .ContentTemplate(new TemplateName("ContentTemplateDropDownBoxConTreeView"))
                                    );
                                });

                            })
                        )
                        <div class="d-flex flex-column pt-2">
                            <label class="dx-field-item-label-text">Variables Identificadas:</label>
                            <table id="tablaVariables" class="table table-bordered border rounded">
                                <tbody>
                                    <tr>
                                        <th>Ingresar Deninición fórmula</th>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-12 col-lg-12">
                        <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">

                            @(Html.DevExtreme()
                                .Button()
                                .Text("Cancelar")
                                .ElementAttr("class", "btn-default btn-oblong btn-width-100 mr-3 mr-sm-3 mr-md-3 mr-lg-3 mr-xl-3")
                                .OnClick("() => modalUnidadMedida.modal('hide')")
                            )
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Aceptar")
                                .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                                .OnClick("guardaCambiosModal")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODAL ELIMINAR -->
<div class="modal fade effect-scale" id="modalConfirmaEliminar" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bd-0">
            <div class="modal-header pd-y-20 pd-x-25">
                <h5 class="dx-field-item-label-text modal-title">¿Está seguro de eliminar la solicitud de unidades de medida?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-12">
                        <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Cancelar")
                                .ElementAttr("class", "btn-normal btn-oblong btn-width-100 mr-3 mr-sm-3 mr-md-3 mr-lg-3 mr-xl-3")
                                .OnClick("() => modalConfirmaEliminar.modal('hide')")
                            )
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Aceptar")
                                .OnClick("eliminaRow")
                                .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODAL DESHACER -->
<div class="modal fade effect-scale" id="modalConfirmaDeshacer" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bd-0">
            <div class="modal-header pd-y-20 pd-x-25">
                <div>
                    <h5 class="dx-field-item-label-text modal-title">Existen cambios sin guardar.</h5>
                    ¿Desea continuar?
                </div>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-12">
                        <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Cancelar")
                                .ElementAttr("class", "btn-normal btn-oblong btn-width-100 mr-3 mr-sm-3 mr-md-3 mr-lg-3 mr-xl-3")
                                .OnClick("() => modalConfirmaDeshacer.modal('hide')")
                            )
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Aceptar")
                                .OnClick("() => { modalConfirmaDeshacer.modal('hide'); regresarListado(); }")
                                .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("ContentTemplateDropDownBoxConTreeView"))
{
    @(Html.DevExtreme().TreeView()
        .DataSource(new JS(@"component.getDataSource()"))
        .KeyExpr("DimensionId")
        .DisplayExpr("Descripcion")
        .ItemsExpr("Items")
        .ExpandedExpr("Expanded")
        .ParentIdExpr("CategoryId")
        .DataStructure(TreeViewDataStructure.Plain)
        .SelectionMode(NavSelectionMode.Multiple)
        .ShowCheckBoxesMode(TreeViewCheckBoxMode.Normal)
        .SelectNodesRecursive(false)
        .SelectByClick(true)
        .OnItemSelectionChanged(@<text>
            function(args) {
                component.option("value", args.component.getSelectedNodeKeys());
            }
        </text>)
        .OnContentReady(@<text>
            function(args) {
                asyncTreeViewSeleccion(args.component, component.option("value"));
            }
        </text>)
    )
}

<!-- CONTENT -->
<div class="br-pagebody" id="content-123">
    <div class="br-section-wrapper">
        <div class="row mb-3">
            <div class="col-md-8 col-lg-8">
                <h6 class="br-section-label">CATÁLOGO DE UNIDADES DE MEDIDA</h6>
            </div>
            <div class="col-md-4 col-lg-4">
                <div class="float-right">
                    @(Html
                        .DevExtreme()
                        .Button()
                        .ElementAttr("class", "btn-primary btn-oblong btn-width-100")
                        .Text("Nuevo")
                        .OnClick("nuevoModal")
                    )
                </div>
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-12">
                @(Html.DevExtreme().DataGrid()
                    .ID("dxDataGridListado")
                    .ShowBorders(true)
                    .ColumnAutoWidth(false)
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .RowAlternationEnabled(true)
                    .NoDataText("Sin registros")
                    .Paging(paging => paging.PageSize(5))
                    .Pager(pager =>
                    {
                        pager.ShowPageSizeSelector(true);
                        pager.AllowedPageSizes(new[] { 5, 10, 20 });
                        pager.ShowInfo(true);
                        pager.InfoText("Página {0} de {1} ( {2} Registros )");
                    })
                    .SearchPanel(sp =>
                        sp
                        .Placeholder("Buscar...")
                        .SearchVisibleColumnsOnly(true)
                        .HighlightSearchText(false)
                        .Visible(true)
                        .Width(200)
                    )
                    .Columns(column =>
                    {

                        column
                        .Add()
                        .Caption("Código")
                        .Width(200)
                        .DataField("UnidadMedidaId")
                        .CalculateCellValue("calculateCellValueUnidadMedidaId");

                        column
                        .Add()
                        .Caption("Nombre")
                        .DataField("Nombre");

                        column
                        .Add()
                        .Caption("Dimensión")
                        .DataField("Dimension")
                        .CalculateCellValue("calculateCellValueDimension");;
                        @*.CellTemplate(new JS("cellTemplate"))
                        .CalculateFilterExpression(@<text>
                            function(filterValue, selectedFilterOperation, target) {
                                if(target === "search" && typeof(filterValue) === "string") {
                                    return [this.dataField, "contains", filterValue]
                                }
                                return function(data) {
                                    return (data.AssignedEmployee || []).indexOf(filterValue) !== -1
                                }
                            }</text>
                        );*@

                        column
                        .Add()
                        .Caption("Fórmula")
                        .DataField("Formula");

                        column
                        .Add()
                        .Caption("Número de variables")
                        .CalculateCellValue("calculateCellValueVariables");

                        column
                        .Add()
                        .Width(100)
                        .Caption("Acciones")
                        .Fixed(true)
                        .FixedPosition(HorizontalEdge.Right)
                        .Type(GridCommandColumnType.Buttons)
                        .Buttons(button =>
                        {

                            button
                                .Add()
                                .Hint("Editar")
                                .Icon("edit")
                                .Visible(new JS("habilitaAccionSistema"))
                                .OnClick("editaModal");

                            button
                                .Add()
                                .Hint("Eliminar")
                                .Icon("trash")
                                .Visible(new JS("habilitaAccionSistema"))
                                .OnClick("confirmaEliminarModal");
                        });

                    })
                )
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">
                    @(Html.DevExtreme()
                        .Button()
                        .ID("dxButtonDeshacer")
                        .Text("Deshacer")
                        .ElementAttr("class", "btn-normal btn-oblong btn-width-100 mr-3 mr-sm-3 mr-md-3 mr-lg-3 mr-xl-3")
                        .OnClick("validaHayCambios")
                    )

                    @(Html.DevExtreme()
                        .Button()
                        .ID("dxButtonGuardar")
                        .Text("Guardar")
                        .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                        .OnClick("guardaCambios")
                    )
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // VARIABLES GLOBALES MODEL //
    var _controlMaestroUnidadMedidaModel =  @Html.Raw(Json.Encode(Model.ControlMaestroUnidadMedidaModel)),
        _controlMaestroUnidadMedidaDimensionModel =  @Html.Raw(Json.Encode(Model.ControlMaestroUnidadMedidaDimensionModel)),
        _controlMaestroUnidadMedidaFormulaVariableModel =  @Html.Raw(Json.Encode(Model.ControlMaestroUnidadMedidaFormulaVariableModel)),
        _listControlMaestroUnidadMedida =  @Html.Raw(Json.Encode(Model.ListControlMaestroUnidadMedida)),
        _listControlMaestroUnidadMedidaDimension =  @Html.Raw(Json.Encode(Model.ListControlMaestroUnidadMedidaDimension)),
        _listControlMaestroUnidadMedidaFormulaVariable =  @Html.Raw(Json.Encode(Model.ListControlMaestroUnidadMedidaFormulaVariable)),
        _listControlMaestroDimension =  @Html.Raw(Json.Encode(Model.ListControlMaestroDimension));
    //////////////////////////////
</script>
<script src="~/Areas/MIR/Catalogos/Views/UnidadMedida/ListadoUnidadMedida.js"></script>