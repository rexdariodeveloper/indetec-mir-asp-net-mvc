@model RequisicionesAlmacen.Areas.MIR.MIR.Models.ViewModel.MatrizConfiguracionPresupuestalSeguimientoVariableViewModel
@{
    ViewData["Title"] = "Seguimiento a Variables";
}

<link href="~/Content/areas/mir/MatrizConfiguracionPresupuestalSeguimientoVariable.css" rel="stylesheet" />

@Html.Partial("_HeaderLayout", new ViewDataDictionary { { "NombreFicha", "Seguimiento a Variables" }, { "Accion", "" }, { "Icono", "icon ion-ios-filing-outline" } })

<!-- MODAL LOADER -->
@Html.Partial("~/Views/Shared/_LoadPanel.cshtml")

<!-- MODAL LOADER DATOS DE LOS INDICADORES -->
@(Html.DevExtreme().LoadPanel()
    .ID("dxLoadPanelDatosIndicadores")
    .ShadingColor("rgba(0,0,0,0.4)")
    .Position(p => p.Of("#right-content"))
    .Visible(false)
    .ShowIndicator(true)
    .ShowPane(true)
    .Shading(true)
    .CloseOnOutsideClick(false)
    .Message("Cargando...")
)

<!-- MODAL CERRAR -->
<div class="modal fade effect-scale" id="modalCerrar" tabindex="-1" role="dialog" data-backdrop="static" data-keyboard="false" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content bd-0">
            <div class="modal-header pd-y-20 pd-x-25">
                <div>
                    <h5 class="dx-field-item-label-text">Existen cambios sin guardar.</h5>
                    ¿Desea continuar?
                </div>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-md-12">
                        <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Cancelar")
                                .ElementAttr("class", "btn-normal btn-oblong btn-width-100 mr-3 mr-sm-3 mr-md-3 mr-lg-3 mr-xl-3")
                                .OnClick("() => modalCerrar.modal('hide')")
                            )
                            @(Html.DevExtreme()
                                .Button()
                                .Text("Aceptar")
                                .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                                .OnClick("() => { regresarListado(); }")
                            )
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- CONTENT -->
<div class="br-pagebody">
    <div class="br-section-wrapper">
        <div class="row mb-3">
            <div class="col-12">
                <!-- Create Form -->
                @(Html.DevExtreme()
                .Form<RequisicionesAlmacenBL.Entities.MIspConsultaMatrizIndicadorResultado_Result>()
                .ID("dxFormMatrizConfiguracionPresupuestal")
                .FormData(Model.ConsultaMatrizIndicadorResultado)
                .LabelLocation(FormLabelLocation.Left)
                .Items(itemCaption =>
                {
                    itemCaption.AddGroup()
                    .ColSpan(12)
                    .ColCount(12)
                    .Caption("Datos de la Matriz de Indicadores para Resultados")
                    .Name("DatosMIR")
                    .Items(itemDatosIndicador =>
                    {
                        itemDatosIndicador.AddGroup()
                        .ColSpan(12)
                        .ColCount(12)
                        .Name("DatosMIRGrupo")
                        .Items(itemGroup =>
                        {

                            itemGroup.AddGroup()
                            .ColSpan(6)
                            .ColCount(12)
                            .Items(_itemGroup =>
                            {
                                _itemGroup.AddSimpleFor(m => m.Codigo)
                                .ColSpan(12)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ID("dxTextBoxCodigo")
                                );

                                _itemGroup.AddSimpleFor(m => m.ProgramaPresupuestario)
                                .ColSpan(12)
                                .Editor(e => e
                                    .TextArea()
                                    .ReadOnly(true)
                                    .ID("dxTextBoxProgramaPresupuestario")
                                );
                            });

                            itemGroup.AddGroup()
                            .ColSpan(6)
                            .ColCount(12)
                            .Items(_itemGroup =>
                            {
                                _itemGroup.AddSimpleFor(m => m.Ejercicio)
                                .ColSpan(12)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ID("dxTextBoxEjercicio")
                                );

                                _itemGroup.AddSimpleFor(m => m.NombrePlanPeriodo)
                                .ColSpan(12)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ID("dxTextBoxNombrePlanPeriodo")
                                );
                            });
                        });
                    });

                    itemCaption.AddGroup()
                    .ColSpan(12)
                    .ColCount(12)
                    .Caption("Datos de los Indicadores")
                    .Name("DatosIndicadores")
                    .Items(itemDatosIndicadores =>
                    {
                        itemDatosIndicadores.AddSimple()
                        .ColSpan(12)
                        .Template(new TemplateName("templateDatosIndicadores"));
                    });
                })
            )
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="d-flex flex-row flex-sm-row flex-md-row flex-lg-row flex-xl-row justify-content-end justify-content-sm-end justify-content-md-end justify-content-lg-end justify-content-xl-end">

                    @(Html.DevExtreme()
                        .Button()
                        .ID("dxButtonCerrar")
                        .Text("Cerrar")
                        .ElementAttr("class", "btn-normal btn-oblong btn-width-100 mb-2 mb-sm-2 mb-md-0 mb-lg-0 mb-xl-0 mr-md-3 mr-lg-3 mr-xl-3")
                        .OnClick("validaHayCambios")
                    )
                    @(Html.DevExtreme()
                        .Button()
                        .ID("dxButtonGuardar")
                        .Text("Guardar")
                        .ElementAttr("class", "btn-success btn-oblong btn-width-100 mt-0 mt-sm-0 mt-md-0 mt-lg-0 mt-xl-0")
                        .OnClick("guardaCambios")
                    )
                </div>
            </div>
        </div>
    </div>
</div>

@* Template Datos de los Indicadores *@
@using (Html.DevExtreme().NamedTemplate("templateDatosIndicadores"))
{
    <div class="row">
        <div class="col-12 col-sm-12 col-md-2 col-lg-2 col-xl-2">
            <div class="left-content">
                @(Html.DevExtreme()
                .TreeView()
                .DataSource(Model.ListMenuSeguimientoVariable)
                .KeyExpr("Id")
                .ItemsExpr("Items")
                .ExpandedExpr("Expanded")
                .SelectionMode(NavSelectionMode.Single)
                .SelectByClick(true)
                .SelectedExpr("Selected")
                .DisplayExpr("Text")
                .OnItemClick("onItemClick"))
            </div>
        </div>
        <div class="col-12 col-sm-12 col-md-10 col-lg-10 col-xl-10">
            <div>
                <!-- Create Form -->
                @(Html.DevExtreme()
                .Form<RequisicionesAlmacenBL.Entities.MItblMatrizIndicadorResultadoIndicador>()
                .ID("dxFormSeguimientoVariable")
                .LabelLocation(FormLabelLocation.Left)
                .OnInitialized("onInitializedFormSeguimientoVariable")
                .Items(itemCaption =>
                {
                    itemCaption.AddGroup()
                    .ColSpan(12)
                    .ColCount(12)
                    .Caption("Datos Generales")
                    .Name("DatosGenerlaes")
                    .Items(itemDatosIndicador =>
                    {
                        itemDatosIndicador.AddGroup()
                        .ColSpan(12)
                        .ColCount(12)
                        .Name("DatosGeneralesGrupo")
                        .Items(itemGroup =>
                        {

                            itemGroup.AddGroup()
                            .ColSpan(6)
                            .ColCount(12)
                            .Items(_itemGroup =>
                            {
                                _itemGroup.AddSimpleFor(m => m.Codigo)
                                .Label(label => label.Text("Código Indicador"))
                                .ColSpan(12)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                );

                                _itemGroup.AddSimpleFor(m => m.NombreIndicador)
                                .Label(label => label.Text("Nombre del Indicador"))
                                .ColSpan(12)
                                .IsRequired(false)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                );

                                _itemGroup.AddSimpleFor(m => m.UnidadMedidaId)
                                .ColSpan(12)
                                .IsRequired(false)
                                .Editor(e => e
                                    .SelectBox()
                                    .DataSource(Model.ListUnidadMedida)
                                    .ValueExpr("UnidadMedidaId")
                                    .DisplayExpr("Nombre")
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                    .Placeholder("")
                                );
                            });

                            itemGroup.AddGroup()
                            .ColSpan(6)
                            .ColCount(12)
                            .Items(_itemGroup =>
                            {
                                _itemGroup.AddSimpleFor(m => m.FrecuenciaMedicionId)
                                .ColSpan(12)
                                .IsRequired(false)
                                .Editor(e => e
                                    .SelectBox()
                                    .DataSource(Model.ListFrecuenciaMedicion)
                                    .ValueExpr("FrecuenciaMedicionId")
                                    .DisplayExpr("Descripcion")
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                    .Placeholder("")
                                );

                                _itemGroup.AddSimpleFor(m => m.SentidoId)
                                .ColSpan(12)
                                .IsRequired(false)
                                .Editor(e => e
                                    .SelectBox()
                                    .DataSource(Model.ListSentido)
                                    .ValueExpr("ControlId")
                                    .DisplayExpr("Valor")
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                    .Placeholder("")
                                );

                                _itemGroup.AddSimpleFor(m => m.DescripcionFormula)
                                .Label(label => label.Text("Fórmula"))
                                .ColSpan(12)
                                .IsRequired(false)
                                .Editor(e => e
                                    .TextBox()
                                    .ReadOnly(true)
                                    .ElementAttr("class", "border-0")
                                );
                            });
                        });
                    });

                    itemCaption.AddGroup()
                    .ColSpan(12)
                    .ColCount(12)
                    .Caption("Captura de Variables")
                    .Name("CapturaVariables")
                    .Items(itemCapturaVariables =>
                    {
                        itemCapturaVariables.AddSimple()
                        .ColSpan(12)
                        .Template(new TemplateName("templateDataGridSeguimientoVariable"));
                    });
                }))
            </div>
        </div>
    </div>

}

@* Template DataGrid Por Ejercer *@
@using (Html.DevExtreme().NamedTemplate("templateDataGridSeguimientoVariable"))
{
    <div class="row">
        <div class="col-12">
            <div id="dxDataGridSeguimientoVariable"></div>
        </div>
    </div>
}

<script src="~/Scripts/funciones/funcion.js"></script>
<script src="~/Scripts/mapeos/control_maestro_mapeo.js"></script>
<script src="~/Scripts/mapeos/control_maestro_frecuencia_medicion.js"></script>

<script>
    // VARIABLES GLOBALES MODEL //
    var _consultaMatrizIndicadorResultado = @Html.Raw(Json.Encode(Model.ConsultaMatrizIndicadorResultado)),
        _listMatrizIndicadorResultadoIndicador = @Html.Raw(Json.Encode(Model.ListMatrizIndicadorResultadoIndicador)),
        _listMatrizIndicadorResultadoIndicadorFormulaVariable = @Html.Raw(Json.Encode(Model.ListMatrizIndicadorResultadoIndicadorFormulaVariable)),
        matrizConfiguracionPresupuestalSeguimientoVariableModel = @Html.Raw(Json.Encode(Model.MatrizConfiguracionPresupuestalSeguimientoVariableModel)),
        _listMatrizConfiguracionPresupuestalSeguimientoVariable = @Html.Raw(Json.Encode(Model.ListMatrizConfiguracionPresupuestalSeguimientoVariable)),
        _listaControlMaestroControlPeriodo =  @Html.Raw(Json.Encode(Model.ListaControlMaestroControlPeriodo));
    //////////////////////////////
</script>
<script src="~/Areas/MIR/MIR/Views/MatrizConfiguracionPresupuestalSeguimientoVariable/MatrizConfiguracionPresupuestalSeguimientoVariable.js"></script>

